openapi: 3.0.0

info:
  title: SupALLM API
  version: "0.0.1"

# Apply security globally
security:
  - BearerAuth: []

paths:
  /projects:
    get:
      summary: List all projects
      operationId: listProjects
      responses:
        "200":
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
    post:
      summary: "Create a project"
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectRequest"
      responses:
        "201":
          description: "Project created"

  /projects/{projectId}:
    get:
      summary: "Get a project by ID"
      operationId: getProject
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: "Project details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "404":
          description: "Project not found"
    put:
      summary: "Update a project"
      operationId: updateProject
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProjectRequest"
      responses:
        "200":
          description: "Project updated"
        "404":
          description: "Project not found"
    delete:
      summary: "Delete a project"
      operationId: deleteProject
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "204":
          description: "Project deleted"
        "404":
          description: "Project not found"

  /projects/{projectId}/credentials:
    get:
      summary: List all credentials for a project
      operationId: listCredentials
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: List of credentials
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Credential"
        "404":
          description: Project not found
    post:
      summary: "Create a credential for a project"
      operationId: createCredential
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCredentialRequest"
      responses:
        "201":
          description: "Credential created"
        "400":
          description: Bad request
        "404":
          description: Project not found

  /projects/{projectId}/credentials/{credentialId}:
    get:
      summary: "Get a credential by ID"
      operationId: getCredential
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
        - name: credentialId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: "Credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credential"
        "404":
          description: Credential or project not found
    put:
      summary: "Update a credential"
      operationId: updateCredential
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
        - name: credentialId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCredentialRequest"
      responses:
        "200":
          description: "Credential updated"
        "400":
          description: Bad request
        "404":
          description: Credential or project not found
    delete:
      summary: "Delete a credential"
      operationId: deleteCredential
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
        - name: credentialId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "204":
          description: "Credential deleted"
        "404":
          description: Credential or project not found

  /projects/{projectId}/models:
    get:
      summary: List all models for a project
      operationId: listModels
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: List of models
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Model"
        "404":
          description: Project not found
    post:
      summary: "Create a model for a project"
      operationId: createModel
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateModelRequest"
      responses:
        "201":
          description: "Model created"
        "400":
          description: Bad request
        "404":
          description: Project not found

  /projects/{projectId}/models/{slug}:
    get:
      summary: "Get a model by slug"
      operationId: getModel
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Model details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
        "404":
          description: Model or project not found
    put:
      summary: "Update a model"
      operationId: updateModel
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
        - name: slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateModelRequest"
      responses:
        "200":
          description: "Model updated"
        "400":
          description: Bad request
        "404":
          description: Model or project not found
    delete:
      summary: "Delete a model"
      operationId: deleteModel
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Model deleted"
        "404":
          description: Model or project not found

  /projects/{projectId}/auth:
    get:
      summary: "Get authentication configuration for a project"
      operationId: getAuth
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: "Authentication configuration"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthProvider"
        "404":
          description: Project not found
    put:
      summary: "Update authentication for a project"
      operationId: updateAuth
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAuthRequest"
      responses:
        "200":
          description: "Authentication updated"
        "400":
          description: Bad request
        "404":
          description: Project not found

  /projects/{projectId}/generateText:
    post:
      summary: "Generate text (HTTP blocking)"
      operationId: generateText
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TextGenerationRequest"
      responses:
        "200":
          description: "Generated text"
          content:
            application/json:
              schema:
                type: object
                properties:
                  text:
                    type: string
        "400":
          description: Bad request
        "404":
          description: Project not found

  /projects/{projectId}/streamText:
    post:
      summary: "Generate text in streaming (SSE)"
      operationId: streamText
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TextGenerationRequest"
      responses:
        "200":
          description: "SSE stream of generated text"
          content:
            text/event-stream:
              schema:
                type: string
                example: 'data: {''text'': ''Hello world''}\n\n'
        "400":
          description: Bad request
        "404":
          description: Project not found

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UUID:
      type: string
      x-go-type: uuid.UUID
      x-go-type-import:
        name: uuid
        path: github.com/google/uuid
    Project:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
        authProvider:
          $ref: "#/components/schemas/AuthProvider"
        credentials:
          type: array
          items:
            $ref: "#/components/schemas/Credential"
        models:
          type: array
          items:
            $ref: "#/components/schemas/Model"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - userId
        - authProvider
        - credentials
        - models
        - createdAt
        - updatedAt

    CreateProjectRequest:
      type: object
      properties:
        name:
          type: string
      required:
        - name

    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
      required:
        - name

    ProviderType:
      type: string
      enum:
        - openai
        - anthropic

    ProviderModel:
      type: string
      enum:
        - gpt-4o
        - gpt-4o-mini
        - claude-3-7-sonnet
        - claude-3-5-sonnet
        - claude-3-5-haiku

    Credential:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
        provider:
          $ref: "#/components/schemas/ProviderType"
        apiKey:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - provider
        - apiKey

    CreateCredentialRequest:
      type: object
      properties:
        name:
          type: string
        provider:
          $ref: "#/components/schemas/ProviderType"
        apiKey:
          type: string
      required:
        - name
        - provider
        - apiKey

    UpdateCredentialRequest:
      type: object
      properties:
        name:
          type: string
        apiKey:
          type: string
      required:
        - name
        - apiKey

    Model:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
        slug:
          type: string
        credential:
          $ref: "#/components/schemas/Credential"
        providerModel:
          $ref: "#/components/schemas/ProviderModel"
        systemPrompt:
          type: string
        parameters:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - slug
        - credential
        - providerModel
        - systemPrompt
        - parameters
        - createdAt
        - updatedAt

    CreateModelRequest:
      type: object
      properties:
        name:
          type: string
        credentialId:
          type: string
          format: uuid
        providerModel:
          type: string
        systemPrompt:
          type: string
        parameters:
          type: object
      required:
        - name
        - credentialId
        - providerModel
        - systemPrompt
        - parameters

    UpdateModelRequest:
      type: object
      properties:
        name:
          type: string
        credentialId:
          type: string
          format: uuid
        providerModel:
          $ref: "#/components/schemas/ProviderModel"
        systemPrompt:
          type: string
        parameters:
          type: object
      required:
        - name
        - credentialId
        - providerModel
        - systemPrompt
        - parameters

    AuthProvider:
      type: object
      properties:
        provider:
          type: string
          enum:
            - supabase
        config:
          type: object
      required:
        - provider
        - config

    UpdateAuthRequest:
      type: object
      properties:
        provider:
          type: string
          enum:
            - supabase
        config:
          type: object
      required:
        - provider
        - config

    TextGenerationRequest:
      type: object
      properties:
        modelSlug:
          type: string
        prompt:
          type: string
      required:
        - modelSlug
        - prompt
