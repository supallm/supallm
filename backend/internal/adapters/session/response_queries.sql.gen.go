// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: response_queries.sql

package session

import (
	"context"

	"github.com/google/uuid"
)

const responseById = `-- name: responseById :one
SELECT id, request_id, session_id, content, status, token_usage, started_at, completed_at
FROM responses
WHERE id = $1
`

func (q *Queries) responseById(ctx context.Context, id uuid.UUID) (Response, error) {
	row := q.db.QueryRow(ctx, responseById, id)
	var i Response
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.SessionID,
		&i.Content,
		&i.Status,
		&i.TokenUsage,
		&i.StartedAt,
		&i.CompletedAt,
	)
	return i, err
}

const responseByRequestId = `-- name: responseByRequestId :one
SELECT id, request_id, session_id, content, status, token_usage, started_at, completed_at
FROM responses
WHERE request_id = $1
`

func (q *Queries) responseByRequestId(ctx context.Context, requestID uuid.UUID) (Response, error) {
	row := q.db.QueryRow(ctx, responseByRequestId, requestID)
	var i Response
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.SessionID,
		&i.Content,
		&i.Status,
		&i.TokenUsage,
		&i.StartedAt,
		&i.CompletedAt,
	)
	return i, err
}

const responsesBySessionId = `-- name: responsesBySessionId :many
SELECT id, request_id, session_id, content, status, token_usage, started_at, completed_at
FROM responses
WHERE session_id = $1
ORDER BY started_at DESC
`

func (q *Queries) responsesBySessionId(ctx context.Context, sessionID uuid.UUID) ([]Response, error) {
	rows, err := q.db.Query(ctx, responsesBySessionId, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Response
	for rows.Next() {
		var i Response
		if err := rows.Scan(
			&i.ID,
			&i.RequestID,
			&i.SessionID,
			&i.Content,
			&i.Status,
			&i.TokenUsage,
			&i.StartedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const storeResponse = `-- name: storeResponse :exec
INSERT INTO responses (id, request_id, session_id, content, status, token_usage)
VALUES ($1, $2, $3, $4, $5, $6)
`

type storeResponseParams struct {
	ID         uuid.UUID `json:"id"`
	RequestID  uuid.UUID `json:"request_id"`
	SessionID  uuid.UUID `json:"session_id"`
	Content    string    `json:"content"`
	Status     string    `json:"status"`
	TokenUsage []byte    `json:"token_usage"`
}

func (q *Queries) storeResponse(ctx context.Context, arg storeResponseParams) error {
	_, err := q.db.Exec(ctx, storeResponse,
		arg.ID,
		arg.RequestID,
		arg.SessionID,
		arg.Content,
		arg.Status,
		arg.TokenUsage,
	)
	return err
}
