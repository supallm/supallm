// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: session_queries.sql

package session

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const activeSessions = `-- name: activeSessions :many
SELECT id, user_id, project_id, active, last_activity_at, created_at
FROM sessions
WHERE active = true
ORDER BY last_activity_at DESC
LIMIT $1
`

func (q *Queries) activeSessions(ctx context.Context, limit int32) ([]Session, error) {
	rows, err := q.db.Query(ctx, activeSessions, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProjectID,
			&i.Active,
			&i.LastActivityAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sessionById = `-- name: sessionById :one
SELECT id, user_id, project_id, active, last_activity_at, created_at
FROM sessions
WHERE id = $1
`

func (q *Queries) sessionById(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, sessionById, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProjectID,
		&i.Active,
		&i.LastActivityAt,
		&i.CreatedAt,
	)
	return i, err
}

const sessionsByProjectId = `-- name: sessionsByProjectId :many
SELECT id, user_id, project_id, active, last_activity_at, created_at
FROM sessions
WHERE project_id = $1
ORDER BY last_activity_at DESC
`

func (q *Queries) sessionsByProjectId(ctx context.Context, projectID uuid.UUID) ([]Session, error) {
	rows, err := q.db.Query(ctx, sessionsByProjectId, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProjectID,
			&i.Active,
			&i.LastActivityAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sessionsByUserId = `-- name: sessionsByUserId :many
SELECT id, user_id, project_id, active, last_activity_at, created_at
FROM sessions
WHERE user_id = $1
ORDER BY last_activity_at DESC
`

func (q *Queries) sessionsByUserId(ctx context.Context, userID string) ([]Session, error) {
	rows, err := q.db.Query(ctx, sessionsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProjectID,
			&i.Active,
			&i.LastActivityAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const storeSession = `-- name: storeSession :exec
INSERT INTO sessions (id, user_id, project_id, active)
VALUES ($1, $2, $3, $4)
`

type storeSessionParams struct {
	ID        uuid.UUID   `json:"id"`
	UserID    string      `json:"user_id"`
	ProjectID uuid.UUID   `json:"project_id"`
	Active    pgtype.Bool `json:"active"`
}

func (q *Queries) storeSession(ctx context.Context, arg storeSessionParams) error {
	_, err := q.db.Exec(ctx, storeSession,
		arg.ID,
		arg.UserID,
		arg.ProjectID,
		arg.Active,
	)
	return err
}

const updateSession = `-- name: updateSession :exec
UPDATE sessions
SET active = $2,
    last_activity_at = NOW()
WHERE id = $1
`

type updateSessionParams struct {
	ID     uuid.UUID   `json:"id"`
	Active pgtype.Bool `json:"active"`
}

func (q *Queries) updateSession(ctx context.Context, arg updateSessionParams) error {
	_, err := q.db.Exec(ctx, updateSession, arg.ID, arg.Active)
	return err
}
