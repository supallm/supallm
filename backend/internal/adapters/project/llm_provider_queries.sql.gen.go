// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: llm_provider_queries.sql

package project

import (
	"context"

	"github.com/google/uuid"
)

const deleteLLMProvider = `-- name: deleteLLMProvider :exec
DELETE FROM llm_providers
WHERE id = $1
`

func (q *Queries) deleteLLMProvider(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteLLMProvider, id)
	return err
}

const llmProvidersByProjectId = `-- name: llmProvidersByProjectId :many
SELECT id, project_id, name, provider_type, api_key_encrypted, api_key_obfuscated, created_at, updated_at
FROM llm_providers
WHERE project_id = $1
`

func (q *Queries) llmProvidersByProjectId(ctx context.Context, projectID uuid.UUID) ([]LlmProvider, error) {
	rows, err := q.db.Query(ctx, llmProvidersByProjectId, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LlmProvider
	for rows.Next() {
		var i LlmProvider
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Name,
			&i.ProviderType,
			&i.ApiKeyEncrypted,
			&i.ApiKeyObfuscated,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const storeLLMProvider = `-- name: storeLLMProvider :exec
INSERT INTO llm_providers (id, project_id, name, provider_type, api_key_encrypted, api_key_obfuscated)
VALUES ($1, $2, $3, $4, $5, $6)
`

type storeLLMProviderParams struct {
	ID               uuid.UUID `json:"id"`
	ProjectID        uuid.UUID `json:"project_id"`
	Name             string    `json:"name"`
	ProviderType     string    `json:"provider_type"`
	ApiKeyEncrypted  string    `json:"api_key_encrypted"`
	ApiKeyObfuscated string    `json:"api_key_obfuscated"`
}

func (q *Queries) storeLLMProvider(ctx context.Context, arg storeLLMProviderParams) error {
	_, err := q.db.Exec(ctx, storeLLMProvider,
		arg.ID,
		arg.ProjectID,
		arg.Name,
		arg.ProviderType,
		arg.ApiKeyEncrypted,
		arg.ApiKeyObfuscated,
	)
	return err
}

const upsertLLMProvider = `-- name: upsertLLMProvider :exec
INSERT INTO llm_providers (id, project_id, name, provider_type, api_key_encrypted, api_key_obfuscated)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (id) 
DO UPDATE SET
    name = EXCLUDED.name,
    provider_type = EXCLUDED.provider_type,
    api_key_encrypted = EXCLUDED.api_key_encrypted,
    api_key_obfuscated = EXCLUDED.api_key_obfuscated,
    updated_at = NOW()
`

type upsertLLMProviderParams struct {
	ID               uuid.UUID `json:"id"`
	ProjectID        uuid.UUID `json:"project_id"`
	Name             string    `json:"name"`
	ProviderType     string    `json:"provider_type"`
	ApiKeyEncrypted  string    `json:"api_key_encrypted"`
	ApiKeyObfuscated string    `json:"api_key_obfuscated"`
}

func (q *Queries) upsertLLMProvider(ctx context.Context, arg upsertLLMProviderParams) error {
	_, err := q.db.Exec(ctx, upsertLLMProvider,
		arg.ID,
		arg.ProjectID,
		arg.Name,
		arg.ProviderType,
		arg.ApiKeyEncrypted,
		arg.ApiKeyObfuscated,
	)
	return err
}
