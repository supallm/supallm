// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: credential_queries.sql

package project

import (
	"context"

	"github.com/google/uuid"
)

const credentialById = `-- name: credentialById :one
SELECT id, project_id, name, provider_type, api_key_encrypted, api_key_obfuscated, created_at, updated_at
FROM credentials
WHERE id = $1
`

func (q *Queries) credentialById(ctx context.Context, id uuid.UUID) (Credential, error) {
	row := q.db.QueryRow(ctx, credentialById, id)
	var i Credential
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.ProviderType,
		&i.ApiKeyEncrypted,
		&i.ApiKeyObfuscated,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const credentialsByProjectId = `-- name: credentialsByProjectId :many
SELECT id, project_id, name, provider_type, api_key_encrypted, api_key_obfuscated, created_at, updated_at
FROM credentials
WHERE project_id = $1
`

func (q *Queries) credentialsByProjectId(ctx context.Context, projectID uuid.UUID) ([]Credential, error) {
	rows, err := q.db.Query(ctx, credentialsByProjectId, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Credential
	for rows.Next() {
		var i Credential
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Name,
			&i.ProviderType,
			&i.ApiKeyEncrypted,
			&i.ApiKeyObfuscated,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteCredential = `-- name: deleteCredential :exec
DELETE FROM credentials
WHERE id = $1
`

func (q *Queries) deleteCredential(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCredential, id)
	return err
}

const storeCredential = `-- name: storeCredential :exec
INSERT INTO credentials (id, project_id, name, provider_type, api_key_encrypted, api_key_obfuscated)
VALUES ($1, $2, $3, $4, $5, $6)
`

type storeCredentialParams struct {
	ID               uuid.UUID `json:"id"`
	ProjectID        uuid.UUID `json:"project_id"`
	Name             string    `json:"name"`
	ProviderType     string    `json:"provider_type"`
	ApiKeyEncrypted  string    `json:"api_key_encrypted"`
	ApiKeyObfuscated string    `json:"api_key_obfuscated"`
}

func (q *Queries) storeCredential(ctx context.Context, arg storeCredentialParams) error {
	_, err := q.db.Exec(ctx, storeCredential,
		arg.ID,
		arg.ProjectID,
		arg.Name,
		arg.ProviderType,
		arg.ApiKeyEncrypted,
		arg.ApiKeyObfuscated,
	)
	return err
}

const upsertCredential = `-- name: upsertCredential :exec
INSERT INTO credentials (id, project_id, name, provider_type, api_key_encrypted, api_key_obfuscated)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (id) 
DO UPDATE SET
    name = EXCLUDED.name,
    provider_type = EXCLUDED.provider_type,
    api_key_encrypted = EXCLUDED.api_key_encrypted,
    api_key_obfuscated = EXCLUDED.api_key_obfuscated,
    updated_at = NOW()
`

type upsertCredentialParams struct {
	ID               uuid.UUID `json:"id"`
	ProjectID        uuid.UUID `json:"project_id"`
	Name             string    `json:"name"`
	ProviderType     string    `json:"provider_type"`
	ApiKeyEncrypted  string    `json:"api_key_encrypted"`
	ApiKeyObfuscated string    `json:"api_key_obfuscated"`
}

func (q *Queries) upsertCredential(ctx context.Context, arg upsertCredentialParams) error {
	_, err := q.db.Exec(ctx, upsertCredential,
		arg.ID,
		arg.ProjectID,
		arg.Name,
		arg.ProviderType,
		arg.ApiKeyEncrypted,
		arg.ApiKeyObfuscated,
	)
	return err
}
