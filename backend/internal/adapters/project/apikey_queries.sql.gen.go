// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: apikey_queries.sql

package project

import (
	"context"

	"github.com/google/uuid"
	secret "github.com/supallm/core/internal/pkg/secret"
)

const apiKeysByProjectId = `-- name: apiKeysByProjectId :many
SELECT id, project_id, key_hash, created_at, updated_at
FROM api_keys
WHERE project_id = $1
`

func (q *Queries) apiKeysByProjectId(ctx context.Context, projectID uuid.UUID) ([]ApiKey, error) {
	rows, err := q.db.Query(ctx, apiKeysByProjectId, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiKey
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.KeyHash,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteAPIKey = `-- name: deleteAPIKey :exec
DELETE FROM api_keys
WHERE id = $1
`

func (q *Queries) deleteAPIKey(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAPIKey, id)
	return err
}

const storeAPIKey = `-- name: storeAPIKey :exec
INSERT INTO api_keys (id, project_id, key_hash)
VALUES ($1, $2, $3)
ON CONFLICT (id) DO NOTHING
`

type storeAPIKeyParams struct {
	ID        uuid.UUID        `json:"id"`
	ProjectID uuid.UUID        `json:"project_id"`
	KeyHash   secret.Encrypted `json:"key_hash"`
}

func (q *Queries) storeAPIKey(ctx context.Context, arg storeAPIKeyParams) error {
	_, err := q.db.Exec(ctx, storeAPIKey, arg.ID, arg.ProjectID, arg.KeyHash)
	return err
}
