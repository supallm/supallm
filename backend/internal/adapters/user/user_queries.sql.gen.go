// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user_queries.sql

package user

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: createUser :one
INSERT INTO users (
    id,
    email,
    name,
    password_hash
) VALUES (
    $1, $2, $3, $4
) RETURNING id, email, name, password_hash, created_at, updated_at
`

type createUserParams struct {
	ID           uuid.UUID `json:"id"`
	Email        string    `json:"email"`
	Name         string    `json:"name"`
	PasswordHash string    `json:"password_hash"`
}

func (q *Queries) createUser(ctx context.Context, arg createUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.PasswordHash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: getUserByEmail :one
SELECT id, email, name, password_hash, created_at, updated_at FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) getUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: getUserByID :one
SELECT id, email, name, password_hash, created_at, updated_at FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) getUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const hasUser = `-- name: hasUser :one
SELECT EXISTS (
    SELECT 1 FROM users
)
`

func (q *Queries) hasUser(ctx context.Context) (bool, error) {
	row := q.db.QueryRow(ctx, hasUser)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateUser = `-- name: updateUser :exec
UPDATE users
SET
    name = COALESCE($2, name),
    email = COALESCE($3, email),
    password_hash = COALESCE($4, password_hash)
WHERE id = $1
`

type updateUserParams struct {
	ID           uuid.UUID   `json:"id"`
	Name         pgtype.Text `json:"name"`
	Email        pgtype.Text `json:"email"`
	PasswordHash pgtype.Text `json:"password_hash"`
}

func (q *Queries) updateUser(ctx context.Context, arg updateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
	)
	return err
}
