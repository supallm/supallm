// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: workflow_event_queries.sql

package workflowevent

import (
	"context"

	"github.com/google/uuid"
)

const storeWorkflowEvent = `-- name: storeWorkflowEvent :exec
INSERT INTO workflow_events (id, workflow_id, trigger_id, event_type, data)
VALUES ($1, $2, $3, $4, $5)
`

type storeWorkflowEventParams struct {
	ID         uuid.UUID `json:"id"`
	WorkflowID uuid.UUID `json:"workflow_id"`
	TriggerID  string    `json:"trigger_id"`
	EventType  string    `json:"event_type"`
	Data       []byte    `json:"data"`
}

func (q *Queries) storeWorkflowEvent(ctx context.Context, arg storeWorkflowEventParams) error {
	_, err := q.db.Exec(ctx, storeWorkflowEvent,
		arg.ID,
		arg.WorkflowID,
		arg.TriggerID,
		arg.EventType,
		arg.Data,
	)
	return err
}

const workflowEventsByTriggerId = `-- name: workflowEventsByTriggerId :many
SELECT id, workflow_id, trigger_id, event_type, data, created_at, updated_at
FROM workflow_events
WHERE trigger_id = $1
`

func (q *Queries) workflowEventsByTriggerId(ctx context.Context, triggerID string) ([]WorkflowEvent, error) {
	rows, err := q.db.Query(ctx, workflowEventsByTriggerId, triggerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkflowEvent
	for rows.Next() {
		var i WorkflowEvent
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowID,
			&i.TriggerID,
			&i.EventType,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const workflowEventsByWorkflowId = `-- name: workflowEventsByWorkflowId :many
SELECT id, workflow_id, trigger_id, event_type, data, created_at, updated_at
FROM workflow_events
WHERE workflow_id = $1
`

func (q *Queries) workflowEventsByWorkflowId(ctx context.Context, workflowID uuid.UUID) ([]WorkflowEvent, error) {
	rows, err := q.db.Query(ctx, workflowEventsByWorkflowId, workflowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkflowEvent
	for rows.Next() {
		var i WorkflowEvent
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowID,
			&i.TriggerID,
			&i.EventType,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
