// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"fmt"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all projects
	// (GET /projects)
	ListProjects(c *fiber.Ctx) error
	// Create a project
	// (POST /projects)
	CreateProject(c *fiber.Ctx) error
	// Delete a project
	// (DELETE /projects/{projectId})
	DeleteProject(c *fiber.Ctx, projectId UUID) error
	// Get a project by ID
	// (GET /projects/{projectId})
	GetProject(c *fiber.Ctx, projectId UUID) error
	// Update a project
	// (PUT /projects/{projectId})
	UpdateProject(c *fiber.Ctx, projectId UUID) error
	// Get authentication configuration for a project
	// (GET /projects/{projectId}/auth)
	GetAuth(c *fiber.Ctx, projectId UUID) error
	// Update authentication for a project
	// (PUT /projects/{projectId}/auth)
	UpdateAuth(c *fiber.Ctx, projectId UUID) error
	// List all credentials for a project
	// (GET /projects/{projectId}/credentials)
	ListCredentials(c *fiber.Ctx, projectId UUID) error
	// Create a credential for a project
	// (POST /projects/{projectId}/credentials)
	CreateCredential(c *fiber.Ctx, projectId UUID) error
	// Delete a credential
	// (DELETE /projects/{projectId}/credentials/{credentialId})
	DeleteCredential(c *fiber.Ctx, projectId UUID, credentialId UUID) error
	// Get a credential by ID
	// (GET /projects/{projectId}/credentials/{credentialId})
	GetCredential(c *fiber.Ctx, projectId UUID, credentialId UUID) error
	// Update a credential
	// (PUT /projects/{projectId}/credentials/{credentialId})
	UpdateCredential(c *fiber.Ctx, projectId UUID, credentialId UUID) error
	// Generate text (HTTP blocking)
	// (POST /projects/{projectId}/generateText)
	GenerateText(c *fiber.Ctx, projectId UUID) error
	// List all models for a project
	// (GET /projects/{projectId}/models)
	ListModels(c *fiber.Ctx, projectId UUID) error
	// Create a model for a project
	// (POST /projects/{projectId}/models)
	CreateModel(c *fiber.Ctx, projectId UUID) error
	// Delete a model
	// (DELETE /projects/{projectId}/models/{slug})
	DeleteModel(c *fiber.Ctx, projectId UUID, slug string) error
	// Get a model by slug
	// (GET /projects/{projectId}/models/{slug})
	GetModel(c *fiber.Ctx, projectId UUID, slug string) error
	// Update a model
	// (PUT /projects/{projectId}/models/{slug})
	UpdateModel(c *fiber.Ctx, projectId UUID, slug string) error
	// Generate text in streaming (SSE)
	// (POST /projects/{projectId}/streamText)
	StreamText(c *fiber.Ctx, projectId UUID) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// ListProjects operation middleware
func (siw *ServerInterfaceWrapper) ListProjects(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.ListProjects(c)
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateProject(c)
}

// DeleteProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteProject(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteProject(c, projectId)
}

// GetProject operation middleware
func (siw *ServerInterfaceWrapper) GetProject(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetProject(c, projectId)
}

// UpdateProject operation middleware
func (siw *ServerInterfaceWrapper) UpdateProject(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateProject(c, projectId)
}

// GetAuth operation middleware
func (siw *ServerInterfaceWrapper) GetAuth(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetAuth(c, projectId)
}

// UpdateAuth operation middleware
func (siw *ServerInterfaceWrapper) UpdateAuth(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateAuth(c, projectId)
}

// ListCredentials operation middleware
func (siw *ServerInterfaceWrapper) ListCredentials(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.ListCredentials(c, projectId)
}

// CreateCredential operation middleware
func (siw *ServerInterfaceWrapper) CreateCredential(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateCredential(c, projectId)
}

// DeleteCredential operation middleware
func (siw *ServerInterfaceWrapper) DeleteCredential(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "credentialId" -------------
	var credentialId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "credentialId", c.Params("credentialId"), &credentialId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter credentialId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteCredential(c, projectId, credentialId)
}

// GetCredential operation middleware
func (siw *ServerInterfaceWrapper) GetCredential(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "credentialId" -------------
	var credentialId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "credentialId", c.Params("credentialId"), &credentialId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter credentialId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetCredential(c, projectId, credentialId)
}

// UpdateCredential operation middleware
func (siw *ServerInterfaceWrapper) UpdateCredential(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "credentialId" -------------
	var credentialId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "credentialId", c.Params("credentialId"), &credentialId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter credentialId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateCredential(c, projectId, credentialId)
}

// GenerateText operation middleware
func (siw *ServerInterfaceWrapper) GenerateText(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GenerateText(c, projectId)
}

// ListModels operation middleware
func (siw *ServerInterfaceWrapper) ListModels(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.ListModels(c, projectId)
}

// CreateModel operation middleware
func (siw *ServerInterfaceWrapper) CreateModel(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateModel(c, projectId)
}

// DeleteModel operation middleware
func (siw *ServerInterfaceWrapper) DeleteModel(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", c.Params("slug"), &slug, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter slug: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteModel(c, projectId, slug)
}

// GetModel operation middleware
func (siw *ServerInterfaceWrapper) GetModel(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", c.Params("slug"), &slug, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter slug: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetModel(c, projectId, slug)
}

// UpdateModel operation middleware
func (siw *ServerInterfaceWrapper) UpdateModel(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", c.Params("slug"), &slug, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter slug: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateModel(c, projectId, slug)
}

// StreamText operation middleware
func (siw *ServerInterfaceWrapper) StreamText(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.StreamText(c, projectId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/projects", wrapper.ListProjects)

	router.Post(options.BaseURL+"/projects", wrapper.CreateProject)

	router.Delete(options.BaseURL+"/projects/:projectId", wrapper.DeleteProject)

	router.Get(options.BaseURL+"/projects/:projectId", wrapper.GetProject)

	router.Put(options.BaseURL+"/projects/:projectId", wrapper.UpdateProject)

	router.Get(options.BaseURL+"/projects/:projectId/auth", wrapper.GetAuth)

	router.Put(options.BaseURL+"/projects/:projectId/auth", wrapper.UpdateAuth)

	router.Get(options.BaseURL+"/projects/:projectId/credentials", wrapper.ListCredentials)

	router.Post(options.BaseURL+"/projects/:projectId/credentials", wrapper.CreateCredential)

	router.Delete(options.BaseURL+"/projects/:projectId/credentials/:credentialId", wrapper.DeleteCredential)

	router.Get(options.BaseURL+"/projects/:projectId/credentials/:credentialId", wrapper.GetCredential)

	router.Put(options.BaseURL+"/projects/:projectId/credentials/:credentialId", wrapper.UpdateCredential)

	router.Post(options.BaseURL+"/projects/:projectId/generateText", wrapper.GenerateText)

	router.Get(options.BaseURL+"/projects/:projectId/models", wrapper.ListModels)

	router.Post(options.BaseURL+"/projects/:projectId/models", wrapper.CreateModel)

	router.Delete(options.BaseURL+"/projects/:projectId/models/:slug", wrapper.DeleteModel)

	router.Get(options.BaseURL+"/projects/:projectId/models/:slug", wrapper.GetModel)

	router.Put(options.BaseURL+"/projects/:projectId/models/:slug", wrapper.UpdateModel)

	router.Post(options.BaseURL+"/projects/:projectId/streamText", wrapper.StreamText)

}
