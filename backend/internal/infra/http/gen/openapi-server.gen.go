// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"fmt"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all projects
	// (GET /projects)
	ListProjects(c *fiber.Ctx) error
	// Create a project
	// (POST /projects)
	CreateProject(c *fiber.Ctx) error
	// Delete a project
	// (DELETE /projects/{projectId})
	DeleteProject(c *fiber.Ctx, projectId UUID) error
	// Get a project by ID
	// (GET /projects/{projectId})
	GetProject(c *fiber.Ctx, projectId UUID) error
	// Update a project
	// (PUT /projects/{projectId})
	UpdateProject(c *fiber.Ctx, projectId UUID) error
	// Update authentication configuration for a project
	// (PUT /projects/{projectId}/auth)
	UpdateAuth(c *fiber.Ctx, projectId UUID) error
	// List all credentials for a project
	// (GET /projects/{projectId}/credentials)
	ListCredentials(c *fiber.Ctx, projectId UUID) error
	// Create a credential for a project
	// (POST /projects/{projectId}/credentials)
	CreateCredential(c *fiber.Ctx, projectId UUID) error
	// Delete a credential
	// (DELETE /projects/{projectId}/credentials/{credentialId})
	DeleteCredential(c *fiber.Ctx, projectId UUID, credentialId UUID) error
	// Get a credential by ID
	// (GET /projects/{projectId}/credentials/{credentialId})
	GetCredential(c *fiber.Ctx, projectId UUID, credentialId UUID) error
	// Update a credential
	// (PATCH /projects/{projectId}/credentials/{credentialId})
	UpdateCredential(c *fiber.Ctx, projectId UUID, credentialId UUID) error
	// List all workflows for a project
	// (GET /projects/{projectId}/workflows)
	ListWorkflows(c *fiber.Ctx, projectId UUID) error
	// Create a workflow for a project
	// (POST /projects/{projectId}/workflows)
	CreateWorkflow(c *fiber.Ctx, projectId UUID) error
	// Delete a workflow
	// (DELETE /projects/{projectId}/workflows/{workflowId})
	DeleteWorkflow(c *fiber.Ctx, projectId UUID, workflowId UUID) error
	// Get a workflow by ID
	// (GET /projects/{projectId}/workflows/{workflowId})
	GetWorkflow(c *fiber.Ctx, projectId UUID, workflowId string) error
	// Update a workflow
	// (PUT /projects/{projectId}/workflows/{workflowId})
	UpdateWorkflow(c *fiber.Ctx, projectId UUID, workflowId string) error
	// Trigger a workflow
	// (POST /projects/{projectId}/workflows/{workflowId}/trigger)
	TriggerWorkflow(c *fiber.Ctx, projectId UUID, workflowId UUID) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// ListProjects operation middleware
func (siw *ServerInterfaceWrapper) ListProjects(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.ListProjects(c)
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateProject(c)
}

// DeleteProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteProject(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteProject(c, projectId)
}

// GetProject operation middleware
func (siw *ServerInterfaceWrapper) GetProject(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetProject(c, projectId)
}

// UpdateProject operation middleware
func (siw *ServerInterfaceWrapper) UpdateProject(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateProject(c, projectId)
}

// UpdateAuth operation middleware
func (siw *ServerInterfaceWrapper) UpdateAuth(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateAuth(c, projectId)
}

// ListCredentials operation middleware
func (siw *ServerInterfaceWrapper) ListCredentials(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.ListCredentials(c, projectId)
}

// CreateCredential operation middleware
func (siw *ServerInterfaceWrapper) CreateCredential(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateCredential(c, projectId)
}

// DeleteCredential operation middleware
func (siw *ServerInterfaceWrapper) DeleteCredential(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "credentialId" -------------
	var credentialId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "credentialId", c.Params("credentialId"), &credentialId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter credentialId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteCredential(c, projectId, credentialId)
}

// GetCredential operation middleware
func (siw *ServerInterfaceWrapper) GetCredential(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "credentialId" -------------
	var credentialId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "credentialId", c.Params("credentialId"), &credentialId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter credentialId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetCredential(c, projectId, credentialId)
}

// UpdateCredential operation middleware
func (siw *ServerInterfaceWrapper) UpdateCredential(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "credentialId" -------------
	var credentialId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "credentialId", c.Params("credentialId"), &credentialId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter credentialId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateCredential(c, projectId, credentialId)
}

// ListWorkflows operation middleware
func (siw *ServerInterfaceWrapper) ListWorkflows(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.ListWorkflows(c, projectId)
}

// CreateWorkflow operation middleware
func (siw *ServerInterfaceWrapper) CreateWorkflow(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateWorkflow(c, projectId)
}

// DeleteWorkflow operation middleware
func (siw *ServerInterfaceWrapper) DeleteWorkflow(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "workflowId" -------------
	var workflowId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", c.Params("workflowId"), &workflowId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter workflowId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteWorkflow(c, projectId, workflowId)
}

// GetWorkflow operation middleware
func (siw *ServerInterfaceWrapper) GetWorkflow(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "workflowId" -------------
	var workflowId string

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", c.Params("workflowId"), &workflowId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter workflowId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetWorkflow(c, projectId, workflowId)
}

// UpdateWorkflow operation middleware
func (siw *ServerInterfaceWrapper) UpdateWorkflow(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "workflowId" -------------
	var workflowId string

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", c.Params("workflowId"), &workflowId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter workflowId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateWorkflow(c, projectId, workflowId)
}

// TriggerWorkflow operation middleware
func (siw *ServerInterfaceWrapper) TriggerWorkflow(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "workflowId" -------------
	var workflowId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", c.Params("workflowId"), &workflowId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter workflowId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.TriggerWorkflow(c, projectId, workflowId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/projects", wrapper.ListProjects)

	router.Post(options.BaseURL+"/projects", wrapper.CreateProject)

	router.Delete(options.BaseURL+"/projects/:projectId", wrapper.DeleteProject)

	router.Get(options.BaseURL+"/projects/:projectId", wrapper.GetProject)

	router.Put(options.BaseURL+"/projects/:projectId", wrapper.UpdateProject)

	router.Put(options.BaseURL+"/projects/:projectId/auth", wrapper.UpdateAuth)

	router.Get(options.BaseURL+"/projects/:projectId/credentials", wrapper.ListCredentials)

	router.Post(options.BaseURL+"/projects/:projectId/credentials", wrapper.CreateCredential)

	router.Delete(options.BaseURL+"/projects/:projectId/credentials/:credentialId", wrapper.DeleteCredential)

	router.Get(options.BaseURL+"/projects/:projectId/credentials/:credentialId", wrapper.GetCredential)

	router.Patch(options.BaseURL+"/projects/:projectId/credentials/:credentialId", wrapper.UpdateCredential)

	router.Get(options.BaseURL+"/projects/:projectId/workflows", wrapper.ListWorkflows)

	router.Post(options.BaseURL+"/projects/:projectId/workflows", wrapper.CreateWorkflow)

	router.Delete(options.BaseURL+"/projects/:projectId/workflows/:workflowId", wrapper.DeleteWorkflow)

	router.Get(options.BaseURL+"/projects/:projectId/workflows/:workflowId", wrapper.GetWorkflow)

	router.Put(options.BaseURL+"/projects/:projectId/workflows/:workflowId", wrapper.UpdateWorkflow)

	router.Post(options.BaseURL+"/projects/:projectId/workflows/:workflowId/trigger", wrapper.TriggerWorkflow)

}
