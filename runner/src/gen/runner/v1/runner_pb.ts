// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file runner/v1/runner.proto (package runner.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message runner.v1.ExecuteWorkflowRequest
 */
export class ExecuteWorkflowRequest extends Message<ExecuteWorkflowRequest> {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId = "";

  /**
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * @generated from field: string computed_workflow_json = 3;
   */
  computedWorkflowJson = "";

  /**
   * @generated from field: string inputs_json = 4;
   */
  inputsJson = "";

  constructor(data?: PartialMessage<ExecuteWorkflowRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runner.v1.ExecuteWorkflowRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "computed_workflow_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "inputs_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteWorkflowRequest {
    return new ExecuteWorkflowRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteWorkflowRequest {
    return new ExecuteWorkflowRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteWorkflowRequest {
    return new ExecuteWorkflowRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteWorkflowRequest | PlainMessage<ExecuteWorkflowRequest> | undefined, b: ExecuteWorkflowRequest | PlainMessage<ExecuteWorkflowRequest> | undefined): boolean {
    return proto3.util.equals(ExecuteWorkflowRequest, a, b);
  }
}

/**
 * @generated from message runner.v1.ExecutionEvent
 */
export class ExecutionEvent extends Message<ExecutionEvent> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * @generated from field: string session_id = 3;
   */
  sessionId = "";

  /**
   * @generated from field: string node_id = 4;
   */
  nodeId = "";

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  /**
   * @generated from field: string data_json = 6;
   */
  dataJson = "";

  /**
   * @generated from field: string timestamp = 7;
   */
  timestamp = "";

  constructor(data?: PartialMessage<ExecutionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runner.v1.ExecutionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "data_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecutionEvent {
    return new ExecutionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecutionEvent {
    return new ExecutionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecutionEvent {
    return new ExecutionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ExecutionEvent | PlainMessage<ExecutionEvent> | undefined, b: ExecutionEvent | PlainMessage<ExecutionEvent> | undefined): boolean {
    return proto3.util.equals(ExecutionEvent, a, b);
  }
}

/**
 * @generated from message runner.v1.ValidateWorkflowRequest
 */
export class ValidateWorkflowRequest extends Message<ValidateWorkflowRequest> {
  /**
   * @generated from field: string workflow_id = 1;
   */
  workflowId = "";

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId = "";

  /**
   * @generated from field: string workflow_json = 3;
   */
  workflowJson = "";

  constructor(data?: PartialMessage<ValidateWorkflowRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runner.v1.ValidateWorkflowRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "workflow_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateWorkflowRequest {
    return new ValidateWorkflowRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateWorkflowRequest {
    return new ValidateWorkflowRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateWorkflowRequest {
    return new ValidateWorkflowRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateWorkflowRequest | PlainMessage<ValidateWorkflowRequest> | undefined, b: ValidateWorkflowRequest | PlainMessage<ValidateWorkflowRequest> | undefined): boolean {
    return proto3.util.equals(ValidateWorkflowRequest, a, b);
  }
}

/**
 * @generated from message runner.v1.ValidateWorkflowResponse
 */
export class ValidateWorkflowResponse extends Message<ValidateWorkflowResponse> {
  /**
   * @generated from field: string computed_workflow_json = 1;
   */
  computedWorkflowJson = "";

  constructor(data?: PartialMessage<ValidateWorkflowResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runner.v1.ValidateWorkflowResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "computed_workflow_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateWorkflowResponse {
    return new ValidateWorkflowResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateWorkflowResponse {
    return new ValidateWorkflowResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateWorkflowResponse {
    return new ValidateWorkflowResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateWorkflowResponse | PlainMessage<ValidateWorkflowResponse> | undefined, b: ValidateWorkflowResponse | PlainMessage<ValidateWorkflowResponse> | undefined): boolean {
    return proto3.util.equals(ValidateWorkflowResponse, a, b);
  }
}

