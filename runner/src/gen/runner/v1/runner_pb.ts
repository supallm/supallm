// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file runner/v1/runner.proto (package runner.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message runner.v1.ExecuteWorkflowRequest
 */
export class ExecuteWorkflowRequest extends Message<ExecuteWorkflowRequest> {
  /**
   * @generated from field: string workflow_id = 1;
   */
  workflowId = "";

  /**
   * @generated from field: bytes computed_definition = 2;
   */
  computedDefinition = new Uint8Array(0);

  /**
   * @generated from field: bytes inputs = 3;
   */
  inputs = new Uint8Array(0);

  constructor(data?: PartialMessage<ExecuteWorkflowRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runner.v1.ExecuteWorkflowRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "computed_definition", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "inputs", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteWorkflowRequest {
    return new ExecuteWorkflowRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteWorkflowRequest {
    return new ExecuteWorkflowRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteWorkflowRequest {
    return new ExecuteWorkflowRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteWorkflowRequest | PlainMessage<ExecuteWorkflowRequest> | undefined, b: ExecuteWorkflowRequest | PlainMessage<ExecuteWorkflowRequest> | undefined): boolean {
    return proto3.util.equals(ExecuteWorkflowRequest, a, b);
  }
}

/**
 * @generated from message runner.v1.ExecutionEvent
 */
export class ExecutionEvent extends Message<ExecutionEvent> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  /**
   * @generated from field: string node_id = 3;
   */
  nodeId = "";

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: bytes data = 5;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: int64 timestamp = 6;
   */
  timestamp = protoInt64.zero;

  constructor(data?: PartialMessage<ExecutionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runner.v1.ExecutionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecutionEvent {
    return new ExecutionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecutionEvent {
    return new ExecutionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecutionEvent {
    return new ExecutionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ExecutionEvent | PlainMessage<ExecutionEvent> | undefined, b: ExecutionEvent | PlainMessage<ExecutionEvent> | undefined): boolean {
    return proto3.util.equals(ExecutionEvent, a, b);
  }
}

/**
 * @generated from message runner.v1.StopWorkflowRequest
 */
export class StopWorkflowRequest extends Message<StopWorkflowRequest> {
  /**
   * @generated from field: string workflow_id = 1;
   */
  workflowId = "";

  constructor(data?: PartialMessage<StopWorkflowRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runner.v1.StopWorkflowRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopWorkflowRequest {
    return new StopWorkflowRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopWorkflowRequest {
    return new StopWorkflowRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopWorkflowRequest {
    return new StopWorkflowRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopWorkflowRequest | PlainMessage<StopWorkflowRequest> | undefined, b: StopWorkflowRequest | PlainMessage<StopWorkflowRequest> | undefined): boolean {
    return proto3.util.equals(StopWorkflowRequest, a, b);
  }
}

/**
 * @generated from message runner.v1.StopWorkflowResponse
 */
export class StopWorkflowResponse extends Message<StopWorkflowResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<StopWorkflowResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runner.v1.StopWorkflowResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopWorkflowResponse {
    return new StopWorkflowResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopWorkflowResponse {
    return new StopWorkflowResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopWorkflowResponse {
    return new StopWorkflowResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopWorkflowResponse | PlainMessage<StopWorkflowResponse> | undefined, b: StopWorkflowResponse | PlainMessage<StopWorkflowResponse> | undefined): boolean {
    return proto3.util.equals(StopWorkflowResponse, a, b);
  }
}

