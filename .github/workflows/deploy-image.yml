name: Build and Publish Docker Image with Semantic Release

on:
  push:
    branches:
      - main
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Authenticate to GitHub Container Registry (GHCR)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Generate OpenAPI Client for Frontend
        run: |
          DOCKER_BUILDKIT=1 docker build -f Dockerfile.generate --target oapi-frontend --output ./frontend/src/lib/services/gen-api .

      - name: Set up QEMU (for cross-platform builds)
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
        # If this step fails, the workflow stops, and no release is published.
      - name: Build and Push Multi-Platform Image
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t ghcr.io/${{ github.repository }}:test .
        env:
          DOCKER_BUILDKIT: 1

      - name: Run Semantic Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release
          if [ -f .VERSION ]; then
            echo "NEW_RELEASE=true" >> $GITHUB_ENV
          else
            echo "NEW_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Extract Semantic Version
        if: env.NEW_RELEASE == 'true'
        run: echo "VERSION=$(cat .VERSION)" >> $GITHUB_ENV

      - name: Tag and Push Docker Image
        if: env.NEW_RELEASE == 'true'
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          docker buildx build \
              --platform=linux/amd64,linux/arm64 \
              --push \
              -t ghcr.io/${{ github.repository }}:$VERSION \
              -t ghcr.io/${{ github.repository }}:latest \
              .